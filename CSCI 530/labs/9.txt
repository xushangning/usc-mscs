1. a. In this case, using node4 as the endpoint is better, because compared with the other approach, using node4 as the endpoint allows the tunnel to protect communication between the client and node3 and defend against packet sniffing and tampering that originates from the the same subnet. If node3 is used as the endpoint, the communication between node3 and node4 is not protected by the tunnel.
    b. In this case, using node3 as the endpoint is a better choice, because although the tunnel does not protect the communication between nodes and node3, all nodes in the subnet can benefit from the tunnel without the need to setting up a tunnel on each node. This matters because the efforts required for setting up the tunnel on a large number of nodes may deter people from doing so, making the whole communication unprotected.
2. The three products support some common ciphers like AES, 3DES and Blowfish. The SSH protocol, stunnel and the OpenVPN in TLS mode all support negotiation of ciphers, while OpenVPN in static key mode uses the same cipher and MAC algorithm every time.
	As for the properties of the ciphers supported by each protocol, SSH protocol version 2 supports AES with a key size of 128, 192 or 256 bits. It also supports the CBC and CTR encryption modes. OpenVPN mentions that its default cipher is Blowfish in CBC mode with a key size up to 448 bits and it supports CBC, CFB and OFB cipher modes.
	For HMACs, SSH protocol version 1 doesn't support integrity check, while version 2 supports HMAC (with MD5,  SHA1, or RIPEMD-160) and UMAC 64. Stunnel supports SHA and MD5 as hashing algorithms. In OpenVPN, the default message digest algorthim is HMAC with SHA1.
	I would say the least secure among them is SSH protocol version 1, as it doesn't support message integrity check and its default cipher is 3DES. It is hard to say which product is more secure because Stunnel and OpenVPN in TLS mode are both based on TLS, and all products use secure ciphers as their default ciphers.
3. The tests for echo and ping won't go through because stunnel is built on a transport-layer protocol (TLS) and can only tunnel application-layer data. Put in another way, stunnel needs to use its own transport- and network-layer protocols, while echo and ICMP requires the use of another transport-layer protocol and network-layer protocol.
	We can create an arrangement like scenario 3 of OpenVPN in the lab instructions, using bridged tunnel over OpenVPN in TLS mode that directly connects node4 to node0. In this arrangement, even link-layer frames will be encrypted and sent through the OpenVPN tunnel.